# Language Learner 웹앱 배포 진행사항 및 TODO

## 📋 현재까지 완료된 작업들

### ✅ 1. Railway 기본 설정 완료
- **MySQL 데이터베이스 생성 완료**
  - Railway에서 MySQL 서비스 생성
  - DATABASE_URL 환경변수 설정
  - Variables 탭에서 MYSQL_URL 확인 완료

- **백엔드 서비스 연결 완료**
  - GitHub 저장소 연결: `loremipsum0116/Language-learner-webapp-project`
  - 브랜치: `feature/mobile-app-development`
  - Root Directory: `web/apps/backend`

### ✅ 2. 환경변수 설정 완료
```env
DATABASE_URL=mysql://[Railway MySQL URL]
JWT_SECRET=language-learner-super-secret-jwt-key-2024-minimum-32-chars
NODE_ENV=production
PORT=3000
```

### ✅ 3. 빌드 설정 최적화
- **Build Command**: `pnpm install && pnpm run build`
- **Start Command**: `npm start`
- **Builder**: Railpack
- **Runtime**: V2

### ✅ 4. 배포 최적화 파일 생성
#### A) railway.json
```json
{
  "build": {
    "builder": "RAILPACK",
    "buildCommand": "pnpm install && pnpm run build"
  },
  "deploy": {
    "startCommand": "npm start",
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

#### B) .railwayignore (최종 버전)
- 모바일 앱 폴더 제외 (`app/`, `mobile/`, `web/apps/mobile/`)
- Frontend 소스 제외 (`web/apps/frontend/src/`, `build/`)
- **모든 미디어 파일 제외** (GCS 마이그레이션 준비)
- 개발 파일들 제외 (로그, IDE 설정, 테스트 파일)

#### C) vercel.json (프론트엔드 배포용)
```json
{
  "buildCommand": "cd web/apps/frontend && npm install && npm run build",
  "outputDirectory": "web/apps/frontend/build",
  "framework": "create-react-app"
}
```

### ✅ 5. 환경 파일 생성
- `.env.example`: 백엔드 환경변수 템플릿
- `.env.production`: 프론트엔드 환경변수
- `deploy.bat`: Windows 배포 스크립트

### ✅ 6. Google Cloud Storage 준비 완료
#### A) 유틸리티 파일 생성
- `upload-to-gcs.js`: 미디어 파일 GCS 업로드 스크립트
- `web/apps/backend/lib/gcsUrls.js`: GCS URL 생성 유틸리티

#### B) 의존성 추가
- `@google-cloud/storage`: GCS 라이브러리 추가

#### C) 환경변수 준비
```env
GCS_BUCKET_NAME="language-learner-audio"
GCS_PROJECT_ID="your-project-id"
GOOGLE_APPLICATION_CREDENTIALS="./gcs-service-account.json"
```

---

## 🚧 현재 상태 및 문제점 (2025년 9월 24일 업데이트)

### ✅ **해결된 문제들**
1. **railway.json 파일 충돌 해결**
   - railway.json 파일 제거하여 Settings UI와 충돌 방지
   - Settings에서만 빌드 설정 관리

2. **Windows/Linux 빌드 스크립트 호환성 문제 해결**
   - Windows 명령어 (`if not exist`, `copy`, `xcopy`) → Linux 명령어 (`mkdir -p`, `cp`) 변경
   - Railway의 Linux 환경에서 정상 작동하도록 수정

3. **workspace 의존성 문제 해결**
   - `"@language-learner/core": "workspace:*"` 의존성 제거
   - npm ci 에러의 주요 원인이었던 workspace 프로토콜 해결

### ⚠️ **현재 진행 중인 문제**
1. **package-lock.json 동기화 문제**
   ```
   npm error Missing: react@19.1.1 from lock file
   npm error Missing: react-dom@19.1.1 from lock file
   npm error Missing: scheduler@0.26.0 from lock file
   ```
   - **원인**: package.json 변경 후 package-lock.json이 완전히 동기화되지 않음
   - **현재 브랜치**: `railway-deploy-fix`
   - **해결 방안**: react 관련 의존성이 백엔드에 필요한지 재검토 필요

2. **의존성 분석 결과**
   - 백엔드 프로젝트에서 React 의존성이 필요하지 않을 가능성
   - package.json에서 불필요한 frontend 의존성 제거 필요

### 🔍 **디버깅 완료된 항목들**
- ✅ Core 패키지 분석: 타입 정의 및 공통 유틸리티 (현재 미사용)
- ✅ 디렉토리 구조 확인: lib, routes, middleware, services 폴더 존재 확인
- ✅ Build 명령어 최적화: Linux 호환 명령어로 변경
- ✅ Railway 설정 검증: ROOT_DIRECTORY, 환경변수, 빌드 명령어 확인

---

## 📋 **즉시 해야 할 TODO 리스트** (2025년 9월 24일 업데이트)

### 🔥 **URGENT (Railway 배포 완료를 위해) - 내일 작업**

#### 1. **React 의존성 문제 해결** ⭐ **최우선**
**위치**: `web/apps/backend/package.json`
```bash
# 문제: 백엔드에 불필요한 React 의존성이 포함되어 있음
npm error Missing: react@19.1.1 from lock file
npm error Missing: react-dom@19.1.1 from lock file

# 해결방안:
1. package.json에서 react, react-dom 의존성 제거
2. npm install --legacy-peer-deps 재실행
3. package-lock.json 재생성 후 커밋
```

#### 2. **현재 Railway 설정 상태** ✅
- **Build Command**: `npm install --legacy-peer-deps && npm run build` ✅
- **Start Command**: `npm start` ✅
- **Root Directory**: `web/apps/backend` ✅
- **Branch**: `railway-deploy-fix` ✅
- **환경변수**: DATABASE_URL, JWT_SECRET, NODE_ENV, PORT 모두 설정 완료 ✅

#### 3. **완료된 수정사항들**
- ✅ railway.json 파일 제거 (Settings UI 충돌 방지)
- ✅ Windows → Linux 명령어 변환 (build 스크립트)
- ✅ workspace 의존성 제거 (`@language-learner/core`)
- ✅ .railwayignore 최적화 (미디어 파일 제외)

#### 4. **내일 진행할 순서**
1. `web/apps/backend/package.json`에서 react 관련 의존성 제거
2. `npm install --legacy-peer-deps` 실행하여 lock 파일 재생성
3. git add, commit, push로 변경사항 배포
4. Railway 자동 배포 성공 확인
5. 백엔드 서비스 URL 획득 및 API 테스트

---

## 🎯 **Google Cloud Storage 마이그레이션 TODO**

### Phase 1: GCS 설정 (1-2시간)

#### 1. Google Cloud Console 설정
- [ ] Google Cloud Console 접속 (https://console.cloud.google.com)
- [ ] 새 프로젝트 생성: "language-learner-production"
- [ ] Cloud Storage API 활성화
- [ ] 결제 계정 설정 (월 $2-5 예상)

#### 2. 서비스 계정 생성
- [ ] IAM → Service Account 생성
- [ ] 권한: Storage Admin
- [ ] JSON 키 다운로드 → `gcs-service-account.json`

#### 3. GCS 버킷 생성
```bash
# gsutil 또는 웹 콘솔에서
gsutil mb gs://language-learner-audio
gsutil mb gs://language-learner-video

# 공개 액세스 설정
gsutil iam ch allUsers:objectViewer gs://language-learner-audio
gsutil iam ch allUsers:objectViewer gs://language-learner-video
```

### Phase 2: 미디어 파일 업로드 (2-3시간)

#### 4. 로컬 미디어 파일 분석
- [ ] 오디오 파일 위치 확인
  - `web/apps/backend/public/audio/`
  - `web/apps/backend/assets/`
  - 기타 미디어 폴더들
- [ ] 파일 크기 및 개수 확인

#### 5. GCS 업로드 실행
```bash
# 의존성 설치
cd web/apps/backend
npm install @google-cloud/storage

# 업로드 스크립트 실행
node ../../../upload-to-gcs.js
```

#### 6. 업로드 결과 확인
- [ ] GCS Console에서 파일 업로드 확인
- [ ] 공개 URL 접속 테스트
- [ ] 예: `https://storage.googleapis.com/language-learner-audio/hello.mp3`

### Phase 3: 코드 마이그레이션 (2-3시간)

#### 7. 백엔드 API 수정
**현재 방식 (수정 필요):**
```javascript
// routes/audio.js
app.get('/audio/:filename', (req, res) => {
  const filePath = path.join(__dirname, 'public/audio', req.params.filename);
  res.sendFile(filePath); // ❌ 서버 리소스 사용
});
```

**수정할 방식:**
```javascript
const { getAudioUrl } = require('../lib/gcsUrls');

app.get('/api/audio/:filename', (req, res) => {
  const audioURL = getAudioUrl(req.params.filename);
  res.json({ audioURL }); // ✅ GCS URL 제공
});
```

#### 8. 데이터베이스 마이그레이션
- [ ] 기존 오디오 경로 → GCS URL 변환
- [ ] Prisma 스키마 확인 및 수정
- [ ] 데이터 마이그레이션 스크립트 작성

#### 9. 프론트엔드 수정
**현재 방식:**
```javascript
const audioURL = `/api/audio/${filename}`; // 서버 경유
```

**수정할 방식:**
```javascript
const audioURL = word.audioURL; // 직접 GCS URL 사용
```

### Phase 4: 배포 및 테스트 (1시간)

#### 10. Railway 환경변수 추가
```env
GCS_BUCKET_NAME=language-learner-audio
GCS_PROJECT_ID=language-learner-production
```

#### 11. .railwayignore 최종 적용
- [✅] 모든 미디어 파일 제외 완료
- [ ] 커밋 및 푸시

#### 12. Railway 재배포
- [ ] 변경사항 커밋
- [ ] GitHub 푸시
- [ ] Railway 자동 배포 확인

#### 13. 기능 테스트
- [ ] 백엔드 API 응답 확인
- [ ] 오디오 재생 테스트
- [ ] 비디오 재생 테스트
- [ ] 성능 측정 (로딩 속도)

---

## 🎯 **Vercel Frontend 배포 TODO**

### 1. Vercel 설정
- [ ] Vercel 계정 연결
- [ ] GitHub 저장소 연결
- [ ] Build 설정 확인

### 2. 환경변수 설정
```env
REACT_APP_API_URL=https://[Railway Backend URL]
GENERATE_SOURCEMAP=false
```

### 3. 배포 및 테스트
- [ ] Vercel 배포 실행
- [ ] Frontend-Backend 연동 테스트

---

## 📊 **예상 개선 효과**

### 배포 속도
- **현재**: Initialization 6분 30초 + Build 실패
- **개선 후**: Initialization 30초 + Build 2분 = **총 3분**

### 서버 비용
- **현재**: Railway 스토리지 비용 높음
- **개선 후**: Railway 서버 비용 + GCS 스토리지 비용 (월 $2-5)

### 성능
- **현재**: 서버를 통한 미디어 서빙 (느림)
- **개선 후**: GCS CDN 직접 접근 (빠름)

---

## 🚨 **주의사항 및 백업**

### 1. 백업 필수
- [ ] 현재 미디어 파일들 로컬 백업
- [ ] 데이터베이스 백업
- [ ] 설정 파일들 백업

### 2. 점진적 마이그레이션
- [ ] 테스트용 버킷으로 일부 파일 먼저 업로드
- [ ] 기능 확인 후 전체 마이그레이션
- [ ] 기존 서버 파일은 즉시 삭제하지 말고 일정 기간 보존

### 3. 모니터링
- [ ] GCS 사용량 모니터링
- [ ] 네트워크 비용 모니터링
- [ ] 오디오 재생 오류 모니터링

---

## 📞 **다음 단계 권장 순서**

1. **즉시 (오늘)**: Railway Build Command 수정 → 배포 성공
2. **1-2일 내**: Google Cloud Storage 설정 및 미디어 업로드
3. **3-4일 내**: 코드 마이그레이션 및 테스트
4. **1주일 내**: Vercel Frontend 배포 완료

---

---

## 📊 **2025년 9월 24일 세션 완료 요약**

### ✅ **오늘 해결한 문제들**
1. **Railway 배포 환경 분석 및 설정 최적화**
   - Build/Start 명령어 확인 및 수정
   - 환경변수 설정 상태 확인
   - Root Directory 및 브랜치 설정 검증

2. **여러 배포 실패 원인 진단 및 해결**
   - railway.json과 Settings UI 충돌 → railway.json 제거
   - Windows/Linux 명령어 호환성 → Linux 명령어로 변환
   - workspace 의존성 → `@language-learner/core` 제거
   - package-lock.json 동기화 → npm install로 재생성

3. **Core 패키지 분석**
   - `@language-learner/core`의 역할과 구조 파악
   - 백엔드에서 실제 사용 여부 확인 (미사용 확인)

### ⚠️ **남은 문제**
- **React 의존성 문제**: 백엔드 package.json에 불필요한 react 의존성 존재
- **최종 해결 필요**: package.json 정리 후 Railway 배포 완료

### 📋 **내일 작업 우선순위**
1. **최우선**: React 의존성 제거 → Railway 배포 성공
2. **그 다음**: Google Cloud Storage 설정 시작
3. **최종**: 프론트엔드 Vercel 배포

---

**마지막 업데이트**: 2025년 9월 24일 오후
**상태**: Railway 배포 99% 완료, React 의존성 문제 1개 남음
**다음 세션 시작점**: `web/apps/backend/package.json`에서 react 관련 의존성 제거