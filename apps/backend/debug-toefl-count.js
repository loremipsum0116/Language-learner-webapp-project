// server/debug-toefl-count.js
// TOEFL Îã®Ïñ¥ Ïàò Ï∞®Ïù¥ Î∂ÑÏÑù

const { prisma } = require('./lib/prismaClient');
const fs = require('fs');

async function debugToeflCount() {
    try {
        console.log('üîç Debugging TOEFL word count discrepancy...\n');
        
        // 1. JSON ÌååÏùºÏóêÏÑú TOEFL Îã®Ïñ¥ Ïàò ÌôïÏù∏
        const cefrVocabs = JSON.parse(fs.readFileSync('./cefr_vocabs.json', 'utf8'));
        const toeflWordsInJson = cefrVocabs.filter(vocab => 
            vocab.categories && vocab.categories.includes('TOEFL')
        );
        console.log(`üìÑ JSON file: ${toeflWordsInJson.length} words contain TOEFL`);
        
        // 2. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú TOEFL Ïπ¥ÌÖåÍ≥†Î¶¨ ÌôïÏù∏
        const toeflCategory = await prisma.examcategory.findUnique({
            where: { name: 'TOEFL' },
            include: {
                vocabexamcategory: {
                    include: {
                        vocab: true
                    }
                }
            }
        });
        
        if (!toeflCategory) {
            console.log('‚ùå TOEFL category not found in database');
            return;
        }
        
        console.log(`üìä Database: ${toeflCategory.vocabexamcategory.length} words linked to TOEFL category`);
        console.log(`üìä Category totalWords field: ${toeflCategory.totalWords}`);
        
        // 3. Ï§ëÎ≥µÎêú Îã®Ïñ¥ ÌôïÏù∏ (lemma + pos Í∞ôÏùÄ Í≤ÉÎì§)
        const vocabsByLemma = {};
        toeflCategory.vocabexamcategory.forEach(vec => {
            const key = `${vec.vocab.lemma}_${vec.vocab.pos}`;
            if (!vocabsByLemma[key]) {
                vocabsByLemma[key] = [];
            }
            vocabsByLemma[key].push(vec.vocab);
        });
        
        const duplicates = Object.entries(vocabsByLemma).filter(([key, vocabs]) => vocabs.length > 1);
        console.log(`üîç Duplicate lemma+pos combinations: ${duplicates.length}`);
        
        if (duplicates.length > 0) {
            console.log('   Examples:');
            duplicates.slice(0, 5).forEach(([key, vocabs]) => {
                console.log(`   - ${key}: ${vocabs.length} entries (IDs: ${vocabs.map(v => v.id).join(', ')})`);
            });
        }
        
        // 4. JSONÏóêÏÑú Ï§ëÎ≥µ ÌôïÏù∏
        const jsonLemmas = {};
        toeflWordsInJson.forEach(vocab => {
            const key = `${vocab.lemma}_${vocab.pos || 'unknown'}`;
            if (!jsonLemmas[key]) {
                jsonLemmas[key] = [];
            }
            jsonLemmas[key].push(vocab);
        });
        
        const jsonDuplicates = Object.entries(jsonLemmas).filter(([key, vocabs]) => vocabs.length > 1);
        console.log(`üîç JSON duplicate lemma+pos combinations: ${jsonDuplicates.length}`);
        
        // 5. Ïã§Ï†ú vocab ÌÖåÏù¥Î∏îÏùò Ï¥ù Îã®Ïñ¥ Ïàò ÌôïÏù∏
        const totalVocabs = await prisma.vocab.count();
        console.log(`üìä Total vocab entries in database: ${totalVocabs}`);
        
        // 6. sourceÎ≥Ñ Î∂ÑÎ•ò
        const vocabsBySource = await prisma.vocab.groupBy({
            by: ['source'],
            _count: {
                id: true
            }
        });
        
        console.log('\nüìä Vocabs by source:');
        vocabsBySource.forEach(group => {
            console.log(`   ${group.source || 'null'}: ${group._count.id} words`);
        });
        
        // 7. ÌéòÏù¥ÏßÄÏóêÏÑú ÌëúÏãúÎêòÎäî Ïπ¥Ïö¥Ìä∏ÏôÄ ÎπÑÍµêÌïòÍ∏∞ ÏúÑÌï¥ Ïã§Ï†ú ÏøºÎ¶¨ Ïã§Ìñâ
        const toeflVocabsQuery = await prisma.vocab.findMany({
            where: {
                vocabexamcategory: {
                    some: {
                        examCategory: {
                            name: 'TOEFL'
                        }
                    }
                }
            },
            select: {
                id: true,
                lemma: true,
                pos: true
            }
        });
        
        console.log(`üîç Direct query result: ${toeflVocabsQuery.length} TOEFL words`);
        
        // 8. ÌéòÏù¥ÏßÄÏóêÏÑú 3713Í∞úÍ∞Ä ÎÇòÏò§Îäî Ïù¥Ïú† Î∂ÑÏÑùÏùÑ ÏúÑÌï¥ Ï§ëÎ≥µ Ï†úÍ±∞Ìï¥ÏÑú Ïπ¥Ïö¥Ìä∏
        const uniqueToeflWords = new Set();
        toeflVocabsQuery.forEach(vocab => {
            uniqueToeflWords.add(vocab.lemma);
        });
        
        console.log(`üîç Unique lemmas in TOEFL: ${uniqueToeflWords.size}`);
        
    } catch (error) {
        console.error('‚ùå Error debugging TOEFL count:', error);
    } finally {
        await prisma.$disconnect();
    }
}

debugToeflCount();