// server/update_cefr_with_suneung.js
// ÏàòÎä•ÏôÑÏÑ±_ÏòÅÎã®Ïñ¥Îßå_Ï§ëÎ≥µÏ†úÍ±∞.txtÏùò Îã®Ïñ¥Îì§Ïù¥ cefr_vocabs.jsonÏóê ÏûàÏúºÎ©¥ levelCEFRÏóê "ÏàòÎä•" Ï∂îÍ∞Ä

const fs = require('fs');
const path = require('path');

const suneungWordsFile = path.join(__dirname, 'ÏàòÎä•ÏôÑÏÑ±_ÏòÅÎã®Ïñ¥Îßå_Ï§ëÎ≥µÏ†úÍ±∞.txt');
const cefrVocabsFile = path.join(__dirname, 'cefr_vocabs.json');
const outputFile = path.join(__dirname, 'cefr_vocabs_updated.json');

try {
    console.log('üîç Reading files...');
    
    // ÏàòÎä• Îã®Ïñ¥ Î™©Î°ù ÏùΩÍ∏∞
    const suneungContent = fs.readFileSync(suneungWordsFile, 'utf8');
    const suneungWords = new Set(
        suneungContent
            .split('\n')
            .map(word => word.trim().toLowerCase())
            .filter(word => word.length > 0)
    );
    
    console.log(`üìä Loaded ${suneungWords.size} ÏàòÎä• words`);
    
    // CEFR vocabs JSON ÏùΩÍ∏∞
    const cefrContent = fs.readFileSync(cefrVocabsFile, 'utf8');
    const cefrVocabs = JSON.parse(cefrContent);
    
    console.log(`üìä Loaded ${cefrVocabs.length} CEFR vocab entries`);
    
    let updatedCount = 0;
    let addedCount = 0;
    
    // Í∞Å CEFR Îã®Ïñ¥Ïóê ÎåÄÌï¥ ÏàòÎä• Îã®Ïñ¥ÏôÄ Îß§Ïπ≠ ÌôïÏù∏
    for (const vocab of cefrVocabs) {
        const lemmaLower = vocab.lemma.toLowerCase();
        
        if (suneungWords.has(lemmaLower)) {
            // levelCEFR ÌïÑÎìú ÌôïÏù∏ Î∞è ÏóÖÎç∞Ïù¥Ìä∏
            if (typeof vocab.levelCEFR === 'string') {
                // Î¨∏ÏûêÏó¥Ïù∏ Í≤ΩÏö∞, "ÏàòÎä•"Ïù¥ ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
                if (!vocab.levelCEFR.includes('ÏàòÎä•')) {
                    vocab.levelCEFR = vocab.levelCEFR + ', ÏàòÎä•';
                    updatedCount++;
                    console.log(`‚úÖ Updated: "${vocab.lemma}" -> levelCEFR: "${vocab.levelCEFR}"`);
                }
            } else if (Array.isArray(vocab.levelCEFR)) {
                // Î∞∞Ïó¥Ïù∏ Í≤ΩÏö∞, "ÏàòÎä•"Ïù¥ ÏóÜÏúºÎ©¥ Ï∂îÍ∞Ä
                if (!vocab.levelCEFR.includes('ÏàòÎä•')) {
                    vocab.levelCEFR.push('ÏàòÎä•');
                    updatedCount++;
                    console.log(`‚úÖ Updated: "${vocab.lemma}" -> levelCEFR: ${JSON.stringify(vocab.levelCEFR)}`);
                }
            } else {
                // Îã§Î•∏ ÌÉÄÏûÖÏù∏ Í≤ΩÏö∞, Î∞∞Ïó¥Î°ú Î≥ÄÍ≤ΩÌïòÍ≥† "ÏàòÎä•" Ï∂îÍ∞Ä
                vocab.levelCEFR = [vocab.levelCEFR, 'ÏàòÎä•'];
                updatedCount++;
                console.log(`‚úÖ Updated: "${vocab.lemma}" -> levelCEFR: ${JSON.stringify(vocab.levelCEFR)}`);
            }
            addedCount++;
        }
    }
    
    // ÏóÖÎç∞Ïù¥Ìä∏Îêú JSON Ï†ÄÏû•
    fs.writeFileSync(outputFile, JSON.stringify(cefrVocabs, null, 2), 'utf8');
    
    console.log(`\nüìà Processing Summary:`);
    console.log(`   Total CEFR entries: ${cefrVocabs.length}`);
    console.log(`   Total ÏàòÎä• words: ${suneungWords.size}`);
    console.log(`   Matched words: ${addedCount}`);
    console.log(`   Updated entries: ${updatedCount}`);
    console.log(`   Match rate: ${((addedCount / suneungWords.size) * 100).toFixed(1)}%`);
    
    console.log(`\n‚úÖ Success! Updated CEFR vocab file saved to: ${path.basename(outputFile)}`);
    console.log(`üìÅ File location: ${outputFile}`);
    
    // Îß§Ïπ≠ÎêòÏßÄ ÏïäÏùÄ ÏàòÎä• Îã®Ïñ¥Îì§ ÏÉòÌîå Ï∂úÎ†•
    const unmatchedWords = [];
    for (const word of suneungWords) {
        const found = cefrVocabs.some(vocab => vocab.lemma.toLowerCase() === word);
        if (!found) {
            unmatchedWords.push(word);
        }
    }
    
    if (unmatchedWords.length > 0) {
        console.log(`\nüìù Sample unmatched ÏàòÎä• words (first 20):`);
        unmatchedWords.slice(0, 20).forEach((word, index) => {
            console.log(`   ${index + 1}. ${word}`);
        });
        console.log(`   ... and ${Math.max(0, unmatchedWords.length - 20)} more unmatched words`);
    }
    
} catch (error) {
    console.error('‚ùå Error updating CEFR vocabs:', error.message);
    process.exit(1);
}