// find-exact-cards.js
// UIÏóê ÌëúÏãúÎêú Ï†ïÌôïÌïú Ïπ¥ÎìúÎì§ Ï∞æÍ∏∞

const { PrismaClient } = require('@prisma/client');

async function findExactCards() {
    console.log('üîç Finding exact cards from UI');

    const PROD_URL = "mysql://root:mdsooQRAMNBnvXHjTyMYwpQvmXUtlZsG@shuttle.proxy.rlwy.net:25466/railway";

    // UIÏóêÏÑú Î≥¥Ïó¨ÏßÑ ÏùºÎ≥∏Ïñ¥ Îã®Ïñ¥Îì§
    const words = [
        '„ÅÇ„Åï„Å£„Å¶', '„ÅÇ„Åù„Åì', '„ÅÇ„Å°„Çâ', '„ÅÇ„Å£„Å°', '„ÅÇ„Å™„Åü',
        '„ÅÇ„ÅÆ', '„Ç¢„Éë„Éº„Éà', '„ÅÇ„Åæ„Çä', '„ÅÇ„Çã', '„ÅÇ„Çå',
        '„ÅÑ„ÅÑ', '„ÅÑ„ÅÑ„Åà', '„ÅÑ„Åã„Åå', '„ÅÑ„Åè„Å§', '„ÅÑ„Åè„Çâ',
        '„ÅÑ„Åô', '„ÅÑ„Å°„Å∞„Çì', '„ÅÑ„Å§', '„ÅÑ„Å§„ÇÇ', '„ÅÑ„Çç„ÅÑ„Çç',
        '„Åà„Åà', '„Ç®„É¨„Éô„Éº„Çø„Éº', '„Åä„ÅÑ„Åó„ÅÑ', '„Åä„Å™„Åã', '„Åä„Å∞„ÅÇ„Åï„Çì',
        '„Åä„ÇÇ„Åó„Çç„ÅÑ', '„ÅäÂÖÑ„Åï„Çì', '„ÅäÂßâ„Åï„Çì', '„ÅäÂ∑°„Çä„Åï„Çì', '„ÅäÂºÅÂΩì'
    ];

    try {
        const prisma = new PrismaClient({
            datasources: { db: { url: PROD_URL } }
        });

        await prisma.$connect();

        const user = await prisma.user.findUnique({
            where: { email: 'sst7050@naver.com' }
        });

        console.log(`‚úÖ Found user: ID ${user.id}`);

        // Í∞Å Îã®Ïñ¥Î•º vocab ÌÖåÏù¥Î∏îÏóêÏÑú Ï∞æÍ∏∞
        console.log('\nüìã Finding exact cards...');

        const foundCards = [];

        for (const word of words.slice(0, 10)) { // Ï≤òÏùå 10Í∞úÎßå
            // vocab ÌÖåÏù¥Î∏îÏóêÏÑú Îã®Ïñ¥ Ï∞æÍ∏∞
            const vocabs = await prisma.vocab.findMany({
                where: {
                    OR: [
                        { word: word },
                        { reading: word },
                        { word: { contains: word } }
                    ]
                },
                take: 1
            });

            if (vocabs.length > 0) {
                const vocab = vocabs[0];

                // Ïù¥ vocabÏóê Ìï¥ÎãπÌïòÎäî ÏÇ¨Ïö©ÏûêÏùò srscard Ï∞æÍ∏∞
                const cards = await prisma.srscard.findMany({
                    where: {
                        userId: user.id,
                        stage: 2,
                        srsfolderitem: {
                            some: {
                                vocabId: vocab.id
                            }
                        }
                    },
                    include: {
                        srsfolderitem: {
                            include: {
                                srsfolder: {
                                    select: { id: true, name: true, parentId: true }
                                },
                                vocab: {
                                    select: { word: true, reading: true }
                                }
                            }
                        }
                    }
                });

                if (cards.length > 0) {
                    foundCards.push(...cards);
                    const card = cards[0];
                    const folder = card.srsfolderitem[0]?.srsfolder;
                    const vocab = card.srsfolderitem[0]?.vocab;

                    const now = new Date();
                    const reviewTime = new Date(card.nextReviewAt);
                    const minutesLeft = Math.floor((reviewTime - now) / 1000 / 60);

                    console.log(`üìå "${word}" ‚Üí Card ${card.id} in "${folder?.name}" (Parent: ${folder?.parentId})`);
                    console.log(`   Review in: ${minutesLeft} minutes | Vocab: ${vocab?.word || vocab?.reading}`);
                }
            }
        }

        if (foundCards.length > 0) {
            // Í∞ôÏùÄ ÌïòÏúÑ Ìè¥ÎçîÎ≥ÑÎ°ú Í∑∏Î£πÌôî
            const folderGroups = {};

            for (const card of foundCards) {
                const folder = card.srsfolderitem[0]?.srsfolder;
                if (!folder?.id) continue;

                if (!folderGroups[folder.id]) {
                    folderGroups[folder.id] = {
                        name: folder.name,
                        parentId: folder.parentId,
                        cards: []
                    };
                }
                folderGroups[folder.id].cards.push(card);
            }

            console.log('\nüóÇÔ∏è  Cards by subfolder:');

            for (const [folderId, group] of Object.entries(folderGroups)) {
                console.log(`\nüìÇ "${group.name}" (ID: ${folderId}, Parent: ${group.parentId})`);
                console.log(`   ${group.cards.length} cards found`);

                if (group.cards.length > 1) {
                    // ÌÉÄÏù¥Î®∏ Ï∞®Ïù¥ Í≥ÑÏÇ∞
                    const times = group.cards.map(c => new Date(c.nextReviewAt).getTime());
                    const diffMs = Math.max(...times) - Math.min(...times);
                    const diffMin = diffMs / 1000 / 60;

                    console.log(`   ‚è±Ô∏è  Timer difference: ${diffMin.toFixed(1)} minutes`);

                    if (diffMin > 0) {
                        console.log(`   üöÄ EXECUTING SYNC NOW...`);

                        const earliestTime = new Date(Math.min(...times));

                        try {
                            const updateResult = await prisma.srscard.updateMany({
                                where: { id: { in: group.cards.map(c => c.id) } },
                                data: { nextReviewAt: earliestTime }
                            });

                            console.log(`   ‚úÖ Synchronized ${updateResult.count} cards to ${earliestTime.toLocaleString()}`);
                        } catch (syncError) {
                            console.log(`   ‚ùå Sync error: ${syncError.message}`);
                        }
                    } else {
                        console.log(`   ‚úÖ Already synchronized`);
                    }
                }
            }
        }

        await prisma.$disconnect();

    } catch (error) {
        console.error('‚ùå Error:', error.message);
    }
}

findExactCards();