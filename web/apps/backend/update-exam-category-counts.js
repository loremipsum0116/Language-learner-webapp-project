// server/update-exam-category-counts.js
// JSON ÌååÏùºÏùò ÏõêÎ≥∏ Í∞úÏàòÎ°ú ÏãúÌóò Ïπ¥ÌÖåÍ≥†Î¶¨ totalWords ÏóÖÎç∞Ïù¥Ìä∏

const { prisma } = require('./lib/prismaClient');
const fs = require('fs');

async function updateExamCategoryCountsFromJson() {
    try {
        console.log('üîç Updating exam category counts from JSON...\n');
        
        // cefr_vocabs.json Î°úÎìú
        const cefrVocabs = JSON.parse(fs.readFileSync('./cefr_vocabs.json', 'utf8'));
        
        // ÏãúÌóòÎ≥Ñ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏõêÎ≥∏ Í∞úÏàò Í≥ÑÏÇ∞
        const examCounts = {
            'TOEFL': 0,
            'TOEIC': 0,
            'ÏàòÎä•': 0,  // ÏàòÎä•
            'IELTS-A': 0
        };
        
        cefrVocabs.forEach(vocab => {
            if (vocab.categories) {
                const categories = vocab.categories.split(',').map(cat => cat.trim());
                
                // TOEFL Ïπ¥Ïö¥Ìä∏
                if (categories.includes('TOEFL')) {
                    examCounts.TOEFL++;
                }
                
                // TOEIC Ïπ¥Ïö¥Ìä∏
                if (categories.includes('TOEIC')) {
                    examCounts.TOEIC++;
                }
                
                // ÏàòÎä• Ïπ¥Ïö¥Ìä∏
                if (categories.includes('ÏàòÎä•')) {
                    examCounts['ÏàòÎä•']++;
                }
                
                // IELTS Ïπ¥Ïö¥Ìä∏ (IELTS-A, IELTS-B, IELTS-C Î™®Îëê Ìè¨Ìï®)
                if (categories.some(cat => cat.startsWith('IELTS'))) {
                    examCounts['IELTS-A']++;
                }
            }
        });
        
        console.log('üìä JSON file counts:');
        Object.entries(examCounts).forEach(([exam, count]) => {
            console.log(`   ${exam}: ${count} words`);
        });
        
        // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
        console.log('\nüîÑ Updating database...');
        
        for (const [examName, count] of Object.entries(examCounts)) {
            const result = await prisma.examcategory.updateMany({
                where: { name: examName },
                data: { totalWords: count }
            });
            
            if (result.count > 0) {
                console.log(`‚úÖ Updated ${examName}: ${count} words`);
            } else {
                console.log(`‚ö†Ô∏è  ${examName} category not found in database`);
            }
        }
        
        // Í≤∞Í≥º ÌôïÏù∏
        console.log('\nüìä Updated categories:');
        const updatedCategories = await prisma.examcategory.findMany({
            orderBy: { name: 'asc' }
        });
        
        updatedCategories.forEach(cat => {
            console.log(`   ${cat.name}: ${cat.totalWords} words`);
        });
        
        console.log('\nüéâ Exam category counts updated successfully!');
        
    } catch (error) {
        console.error('‚ùå Error updating exam category counts:', error);
    } finally {
        await prisma.$disconnect();
    }
}

updateExamCategoryCountsFromJson();