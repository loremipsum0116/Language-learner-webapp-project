const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function cleanReadingDuplicates() {
  try {
    console.log('üßπ Reading ÌÖåÏù¥Î∏î Ï§ëÎ≥µ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏãúÏûë...');

    // 1. ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
    const totalCount = await prisma.reading.count();
    console.log(`üìä ÌòÑÏû¨ Ï¥ù Îç∞Ïù¥ÌÑ∞ Í∞úÏàò: ${totalCount}Í∞ú`);

    // 2. Ï§ëÎ≥µ Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
    const duplicates = await prisma.reading.groupBy({
      by: ['title'],
      having: {
        id: {
          _count: {
            gt: 1
          }
        }
      },
      _count: {
        id: true
      }
    });

    console.log(`üîç Ï§ëÎ≥µÎêú Ï†úÎ™© Í∞úÏàò: ${duplicates.length}Í∞ú`);

    // 3. Í∞Å Ï§ëÎ≥µ Ï†úÎ™©Ïóê ÎåÄÌï¥ Í∞ÄÏû• ÏûëÏùÄ IDÎßå ÎÇ®Í∏∞Í≥† ÎÇòÎ®∏ÏßÄ ÏÇ≠Ï†ú
    let deletedCount = 0;

    for (const duplicate of duplicates) {
      const title = duplicate.title;

      // Ìï¥Îãπ Ï†úÎ™©Ïùò Î™®Îì† Î†àÏΩîÎìúÎ•º ID ÏàúÏúºÎ°ú Ï†ïÎ†¨Ìï¥ÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
      const records = await prisma.reading.findMany({
        where: { title: title },
        orderBy: { id: 'asc' }
      });

      if (records.length > 1) {
        // Ï≤´ Î≤àÏß∏(Í∞ÄÏû• ÏûëÏùÄ ID)Î•º Ï†úÏô∏Ìïú ÎÇòÎ®∏ÏßÄ ÏÇ≠Ï†ú
        const idsToDelete = records.slice(1).map(r => r.id);

        const deleteResult = await prisma.reading.deleteMany({
          where: {
            id: {
              in: idsToDelete
            }
          }
        });

        deletedCount += deleteResult.count;
        console.log(`  üóëÔ∏è  "${title}": ${idsToDelete.length}Í∞ú Ï§ëÎ≥µ ÏÇ≠Ï†ú`);
      }
    }

    console.log(`\n‚úÖ Ï§ëÎ≥µ Ï†ïÎ¶¨ ÏôÑÎ£å! ${deletedCount}Í∞ú Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†úÎê®`);

    // 4. Ï†ïÎ¶¨ ÌõÑ ÏÉÅÌÉú ÌôïÏù∏
    const finalCount = await prisma.reading.count();
    console.log(`üìã Ï†ïÎ¶¨ ÌõÑ Ï¥ù Îç∞Ïù¥ÌÑ∞ Í∞úÏàò: ${finalCount}Í∞ú`);

    const levelCounts = await prisma.reading.groupBy({
      by: ['levelCEFR'],
      _count: {
        id: true
      }
    });

    console.log('\nüìñ Ï†ïÎ¶¨ ÌõÑ Î†àÎ≤®Î≥Ñ Îç∞Ïù¥ÌÑ∞ Í∞úÏàò:');
    levelCounts.forEach(level => {
      console.log(`  ${level.levelCEFR}: ${level._count.id}Í∞ú`);
    });

  } catch (error) {
    console.error('‚ùå Ï§ëÎ≥µ Ï†ïÎ¶¨ Ï§ë Ïò§Î•ò:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanReadingDuplicates();