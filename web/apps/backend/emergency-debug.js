// emergency-debug.js
// ÎèôÏùºÌôî ÏãúÏä§ÌÖúÏù¥ ÏûëÎèôÌïòÏßÄ ÏïäÎäî Í∑ºÎ≥∏ ÏõêÏù∏ ÌååÏïÖ

const { prisma } = require('./lib/prismaClient');

async function emergencyDebug() {
    console.log('üö® EMERGENCY DEBUG: Why sync system is NOT working');

    try {
        // 1. Ïã§Ï†ú sst7050@naver.com ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
        console.log('\n=== 1. User verification ===');

        const allUsers = await prisma.user.findMany({
            select: { id: true, email: true },
            take: 20
        });

        console.log('All users in database:');
        for (const user of allUsers) {
            console.log(`  ${user.id}: ${user.email}`);
            if (user.email && user.email.includes('sst')) {
                console.log(`  ^^^^^ FOUND SST USER! ^^^^^`);
            }
        }

        // sst7050@naver.com ÏßÅÏ†ë Í≤ÄÏÉâ
        const targetUser = await prisma.user.findFirst({
            where: {
                OR: [
                    { email: 'sst7050@naver.com' },
                    { email: { contains: 'sst7050' } }
                ]
            }
        });

        if (!targetUser) {
            console.log('‚ùå CRITICAL: sst7050@naver.com user does NOT exist in database!');
            console.log('‚ùå This means we are checking wrong database or user account');
            return;
        }

        console.log(`‚úÖ Found target user: ID ${targetUser.id}, Email: ${targetUser.email}`);

        // 2. Ìï¥Îãπ ÏÇ¨Ïö©ÏûêÏùò Ïã§Ï†ú Ïπ¥Îìú Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        console.log('\n=== 2. User card verification ===');

        const userCards = await prisma.srscard.count({
            where: { userId: targetUser.id }
        });

        console.log(`User ${targetUser.id} has ${userCards} total SRS cards`);

        // Stage 2 Ïπ¥ÎìúÎì§ ÌôïÏù∏
        const stage2Cards = await prisma.srscard.findMany({
            where: {
                userId: targetUser.id,
                stage: 2
            },
            select: {
                id: true,
                stage: true,
                nextReviewAt: true,
                srsfolderitem: true
            },
            take: 30
        });

        console.log(`Found ${stage2Cards.length} Stage 2 cards for user ${targetUser.id}`);

        if (stage2Cards.length === 0) {
            console.log('‚ùå CRITICAL: No Stage 2 cards found!');
            console.log('‚ùå The Japanese cards shown in UI do not exist in database');
            return;
        }

        // 3. ÌÉÄÏù¥Î®∏ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏
        console.log('\n=== 3. Timer data verification ===');

        const cardsWithTimers = stage2Cards.filter(c => c.nextReviewAt);
        console.log(`Cards with nextReviewAt: ${cardsWithTimers.length}/${stage2Cards.length}`);

        if (cardsWithTimers.length === 0) {
            console.log('‚ùå CRITICAL: No cards with timers found!');
            return;
        }

        // Ïã§Ï†ú ÌÉÄÏù¥Î®∏ Í∞íÎì§ ÌôïÏù∏
        for (const card of cardsWithTimers.slice(0, 5)) {
            const now = new Date();
            const reviewTime = new Date(card.nextReviewAt);
            const minutesLeft = Math.floor((reviewTime - now) / 1000 / 60);
            console.log(`  Card ${card.id}: ${minutesLeft} minutes (${reviewTime.toISOString()})`);
        }

        // 4. ÌïòÏúÑ Ìè¥Îçî Íµ¨Ï°∞ ÌôïÏù∏
        console.log('\n=== 4. Folder structure verification ===');

        // Í∞Å Ïπ¥ÎìúÏùò Ìè¥Îçî Ï†ïÎ≥¥ ÌôïÏù∏
        for (const card of cardsWithTimers.slice(0, 3)) {
            const folderItems = await prisma.srsfolderitem.findMany({
                where: { srscardId: card.id },
                include: {
                    srsfolder: {
                        select: { id: true, parentId: true, name: true }
                    }
                }
            });

            console.log(`Card ${card.id} folders:`);
            for (const item of folderItems) {
                const folder = item.srsfolder;
                console.log(`  - Folder "${folder.name}" (ID: ${folder.id}, Parent: ${folder.parentId})`);
            }
        }

        // 5. ÎèôÏùºÌôî Ìï®ÏàòÍ∞Ä Ïã§Ï†úÎ°ú Ìò∏Ï∂úÎêòÎäîÏßÄ ÌôïÏù∏
        console.log('\n=== 5. Sync function test ===');

        try {
            const { synchronizeSubfolderTimers } = require('./services/timerSyncService');

            // Ï≤´ Î≤àÏß∏ Ïπ¥ÎìúÏùò ÌïòÏúÑ Ìè¥ÎçîÏóê ÎåÄÌï¥ ÎèôÏùºÌôî ÏãúÎèÑ
            const firstCard = cardsWithTimers[0];
            const folderItems = await prisma.srsfolderitem.findMany({
                where: { srscardId: firstCard.id },
                include: { srsfolder: true }
            });

            if (folderItems.length > 0) {
                const folder = folderItems[0].srsfolder;
                if (folder.parentId) {
                    console.log(`Testing sync for parent folder ${folder.parentId}...`);

                    const result = await synchronizeSubfolderTimers(targetUser.id, folder.parentId);
                    console.log('Sync result:', result);

                    if (!result.success) {
                        console.log('‚ùå SYNC FAILED:', result.message);
                    } else if (result.totalSyncedCards === 0) {
                        console.log('‚ùå NO CARDS SYNCED:', result.message);
                    } else {
                        console.log('‚úÖ SYNC SUCCESS:', result.totalSyncedCards, 'cards synced');
                    }
                } else {
                    console.log('‚ùå Card is not in a subfolder (no parentId)');
                }
            }

        } catch (syncError) {
            console.log('‚ùå SYNC FUNCTION ERROR:', syncError.message);
        }

        // 6. ÌÅ¨Î°†Ïû° ÏÑ§Ï†ï ÌôïÏù∏
        console.log('\n=== 6. Cron job verification ===');

        try {
            const { runPeriodicAutoSync } = require('./services/autoTimerSyncService');
            console.log('Testing periodic auto sync...');

            const cronResult = await runPeriodicAutoSync(targetUser.id);
            console.log('Cron result:', cronResult);
        } catch (cronError) {
            console.log('‚ùå CRON FUNCTION ERROR:', cronError.message);
        }

    } catch (error) {
        console.error('‚ùå EMERGENCY DEBUG ERROR:', error);
    }

    await prisma.$disconnect();
}

emergencyDebug();