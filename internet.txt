# Language Learner 웹 프로젝트 인터넷 서버 배포 가이드

## 프로젝트 개요
- 모노레포 구조 (pnpm workspace)
- Frontend: React 앱 (@language-learner/frontend)
- Backend: Node.js Express 서버 (@language-learner/backend)
- 데이터베이스: MySQL with Prisma ORM

## 1. 사전 준비사항

### 필요한 계정
- Vercel 계정 (Frontend 배포)
- Railway 계정 (Backend + Database 배포)
- GitHub 계정 (코드 저장소)

### 로컬 환경 확인 ✅
```bash
# Node.js 버전 확인 (현재: v22.17.1 ✅)
node --version

# pnpm 설치 확인 (현재: v9.5.0 ✅)
pnpm --version

# 프로젝트 의존성 설치 ✅
cd web
pnpm install
```

### 빌드 테스트 ✅
```bash
# Windows용 배포 스크립트 실행
deploy.bat

# 또는 수동 빌드
cd web/apps/frontend && npm run build  # ✅ 성공
cd web/apps/backend && npm run build   # ✅ 성공
```

## 2. 데이터베이스 배포 (Railway)

### 2.1 Railway MySQL 데이터베이스 생성
1. Railway.app 접속 및 로그인
2. "New Project" → "Provision MySQL" 선택
3. 데이터베이스 생성 후 연결 정보 확인

### 2.2 환경변수 설정
```env
# Railway에서 제공하는 DATABASE_URL 사용
DATABASE_URL="mysql://username:password@host:port/database_name"
```

### 2.3 Prisma 마이그레이션
```bash
cd web/apps/backend

# Prisma 클라이언트 생성
npx prisma generate

# 데이터베이스 스키마 배포
npx prisma db push

# 시드 데이터 실행 (필요시)
npm run seed
```

## 3. Backend 배포 (Railway)

### 3.1 Railway 프로젝트 생성
1. Railway 대시보드에서 "New Project"
2. "Deploy from GitHub repo" 선택
3. Language-learner 저장소 연결

### 3.2 빌드 설정 ✅
railway.json 파일이 이미 생성되어 있습니다:
```json
// railway.json (루트에 이미 생성됨 ✅)
{
  "build": {
    "builder": "NIXPACKS",
    "buildCommand": "cd web && pnpm install && cd apps/backend && npm run build"
  },
  "deploy": {
    "startCommand": "cd web/apps/backend && npm start",
    "restartPolicyType": "ON_FAILURE",
    "restartPolicyMaxRetries": 10
  }
}
```

### 3.3 환경변수 설정 (Railway 대시보드) ✅
web/apps/backend/.env.example 파일을 참고하여 설정:
```env
NODE_ENV=production
DATABASE_URL=mysql://[Railway에서 제공하는 URL]
JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters
PORT=3000
CORS_ORIGIN=https://your-frontend-domain.vercel.app
```
💡 .env.example 파일에 전체 환경변수 목록이 있습니다.

### 3.4 포트 설정
```javascript
// web/apps/backend/index.js에서 확인
const PORT = process.env.PORT || 3000;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
});
```

## 4. Frontend 배포 (Vercel)

### 4.1 Vercel CLI 설치 및 로그인
```bash
npm install -g vercel
vercel login
```

### 4.2 Frontend 배포 준비 ✅
```bash
cd web/apps/frontend

# 환경변수 파일이 이미 생성되어 있습니다 ✅
# .env.production 파일 확인 후 API URL 수정

# 빌드 테스트 ✅
npm run build
```

### 4.3 Vercel 배포 ✅
vercel.json 설정 파일이 이미 생성되어 있습니다:
```bash
# 프로젝트 배포
vercel --prod

# 또는 Vercel 대시보드에서 GitHub 연동 (권장)
```

### 4.4 Vercel 프로젝트 설정
1. Vercel 대시보드에서 프로젝트 선택
2. Settings → Build & Development Settings
```
Framework Preset: Create React App
Root Directory: web/apps/frontend
Build Command: npm run build
Output Directory: build
Install Command: npm install
```

### 4.5 환경변수 설정 (Vercel 대시보드)
```env
REACT_APP_API_URL=https://your-backend-domain.railway.app
```

## 5. 도메인 설정

### 5.1 커스텀 도메인 (선택사항)
**Vercel (Frontend)**
1. Project Settings → Domains
2. 도메인 추가 및 DNS 설정

**Railway (Backend)**
1. Project Settings → Custom Domain
2. 도메인 추가 및 DNS 설정

### 5.2 CORS 설정 확인
```javascript
// web/apps/backend/index.js
app.use(cors({
  origin: [
    'https://your-frontend-domain.vercel.app',
    'https://your-custom-domain.com'
  ],
  credentials: true
}));
```

## 6. 배포 스크립트 자동화

### 6.1 GitHub Actions (선택사항)
```yaml
# .github/workflows/deploy.yml
name: Deploy

on:
  push:
    branches: [ main ]

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      - run: cd web/apps/frontend && npm install && npm run build
      - uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
```

### 6.2 배포 명령어 스크립트
```bash
# deploy.sh (실행 권한 필요)
#!/bin/bash

echo "🚀 Language Learner 배포 시작..."

# Backend 배포 (Railway)
echo "📦 Backend 배포 중..."
cd web/apps/backend
npm run build

# Frontend 배포 (Vercel)
echo "🎨 Frontend 배포 중..."
cd ../frontend
npm run build
vercel --prod

echo "✅ 배포 완료!"
```

## 7. 모니터링 및 로그

### 7.1 Railway 로그 확인
```bash
# Railway CLI 설치
npm install -g @railway/cli

# 로그인 및 로그 확인
railway login
railway logs
```

### 7.2 Vercel 함수 로그
- Vercel 대시보드 → Functions → View Logs

## 8. 트러블슈팅

### 8.1 일반적인 문제
**빌드 실패**
- Node.js 버전 확인 (18+ 권장)
- 의존성 설치 확인: `pnpm install`
- 환경변수 설정 확인

**CORS 에러**
```javascript
// Backend CORS 설정
app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true
}));
```

**데이터베이스 연결 실패**
- DATABASE_URL 형식 확인
- 네트워크 보안 그룹 설정 확인
- Prisma 클라이언트 재생성: `npx prisma generate`

### 8.2 성능 최적화
```bash
# 빌드 크기 분석
cd web/apps/frontend
npm run analyze

# 이미지 최적화 (Vercel 자동)
# API 캐싱 설정
```

## 9. 배포 체크리스트

### 배포 전
- [ ] 로컬에서 프로덕션 빌드 테스트
- [ ] 환경변수 설정 완료
- [ ] CORS 설정 확인
- [ ] 데이터베이스 마이그레이션 완료
- [ ] API 엔드포인트 테스트

### 배포 후
- [ ] Frontend 접속 확인
- [ ] API 연동 테스트
- [ ] 데이터베이스 연결 확인
- [ ] 사용자 가입/로그인 테스트
- [ ] 핵심 기능 동작 확인

## 10. 예상 비용
- **Vercel**: 무료 플랜 (Hobby) - 월 무료
- **Railway**:
  - 데이터베이스: 월 $5-10
  - 백엔드 서버: 사용량에 따라 $0-20

## 11. 생성된 배포 파일들 ✅

프로젝트에 다음 파일들이 생성되었습니다:

### 배포 설정 파일
- `railway.json` - Railway 배포 설정
- `vercel.json` - Vercel 배포 설정
- `web/apps/frontend/.env.production` - 프론트엔드 환경변수
- `web/apps/backend/.env.example` - 백엔드 환경변수 예시

### 배포 스크립트
- `deploy.bat` - Windows용 배포 준비 스크립트

### 사용법
1. `deploy.bat` 실행하여 로컬 빌드 테스트
2. GitHub에 코드 푸시
3. Railway에서 백엔드 배포
4. Vercel에서 프론트엔드 배포

## 12. 지원 및 문의
- Railway 문서: https://docs.railway.app
- Vercel 문서: https://vercel.com/docs
- Prisma 문서: https://www.prisma.io/docs

---
마지막 업데이트: 2025년 1월 (배포 파일 생성 완료)