# 히라가나/가타카나 학습 기능 구현 계획

## 📋 프로젝트 구조 분석 결과

### 아키텍처 개요
- **구조**: Monorepo (pnpm workspace)
- **Frontend**: React.js + React Router + Bootstrap
- **Backend**: Node.js/Express + Prisma ORM
- **Database**: MySQL
- **언어 지원**: 영어, 일본어 (JLPT N1-N5)

### 기존 학습 기능
1. **어휘 학습**: SRS(Spaced Repetition System) 기반
2. **독해 연습**: 레벨별 지문 + 문제
3. **청취 연습**: 오디오 파일 + 문제
4. **문법 퀴즈**: 영어/일본어 문법
5. **복습 시스템**: 오답노트, 단어장, SRS 폴더

### 기존 데이터베이스 구조
- **vocab**: 어휘 데이터 (다국어 지원)
- **srscard**: SRS 학습 카드 시스템
- **srsfolder**: 학습 폴더 관리
- **wronganswer**: 오답 관리 시스템
- **Language/VocabTranslation**: 다국어 번역 지원

## 🈲 히라가나/가타카나 학습 기능 상세 계획

### 1. 폴더 구조 및 라우팅

```
Frontend Routes:
/kana                        // 히라가나/가타카나 홈
├── /practice
│   ├── /hiragana-basic     // 기본 50음 (あいうえお...)
│   ├── /hiragana-advanced  // 탁음, 반탁음, 요음 (がざだば...)
│   ├── /katakana-basic     // 기본 50음 (アイウエオ...)
│   └── /katakana-advanced  // 탁음, 반탁음, 요음 (ガザダバ...)
├── /recognition            // 문자 → 로마자 인식 모드
├── /writing               // 로마자 → 문자 쓰기 모드
├── /audio                 // 음성 듣고 문자 선택
├── /mixed                 // 히라가나+가타카나 혼합
├── /test                  // 종합 테스트
└── /stats                 // 학습 통계 및 진도
```

### 2. 학습 모드별 세부 기능

#### A. 인식 모드 (Recognition Mode)
- **기능**: 히라가나/가타카나 → 로마자 변환
- **입력 방식**:
  - 다중 선택 (4지 선다)
  - 타이핑 입력
  - 드래그 앤 드롭
- **난이도 조절**: 유사한 문자끼리 묶어서 출제
- **시각적 피드백**: 정답/오답 즉시 표시

#### B. 쓰기 모드 (Writing Mode)
- **기능**: 로마자 → 히라가나/가타카나 변환
- **Canvas API 활용**:
  - 마우스/터치로 직접 그리기
  - 올바른 획순 가이드라인 제공
  - 획순 검증 알고리즘
- **보조 기능**:
  - 연습장 모드 (자유 그리기)
  - 따라 그리기 모드
  - 기억해서 그리기 모드

#### C. 청취 모드 (Audio Mode)
- **TTS API 활용**: Google Cloud Text-to-Speech
- **기능**:
  - 음성 듣고 해당 문자 선택
  - 발음 반복 재생
  - 속도 조절 (0.5x ~ 2.0x)
- **단계별 학습**:
  - 개별 문자 → 문자 조합 → 단어

#### D. 혼합 모드 (Mixed Mode)
- **히라가나 + 가타카나** 섞어서 출제
- **실제 일본어 단어** 문맥에서 학습
- **문자 종류 구분** 연습
- **상황별 사용법** 학습

### 3. 데이터베이스 확장 설계

```sql
-- 히라가나/가타카나 문자 마스터 테이블
CREATE TABLE kana_characters (
  id INT PRIMARY KEY AUTO_INCREMENT,
  type ENUM('hiragana', 'katakana') NOT NULL,
  character VARCHAR(5) NOT NULL UNIQUE,
  romaji VARCHAR(10) NOT NULL,
  stroke_order JSON, -- 획순 데이터 [{"x":[],"y":[]}, ...]
  difficulty_level ENUM('basic', 'advanced') DEFAULT 'basic',
  category VARCHAR(20), -- 'gojuon', 'dakuten', 'handakuten', 'youon'
  audio_url VARCHAR(255),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,

  INDEX idx_type_difficulty (type, difficulty_level),
  INDEX idx_category (category)
);

-- 히라가나/가타카나 학습 진행상황
CREATE TABLE kana_progress (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL,
  character_id INT NOT NULL,
  mastery_level INT DEFAULT 0, -- 0-100 숙련도
  recognition_score INT DEFAULT 0, -- 인식 모드 점수
  writing_score INT DEFAULT 0, -- 쓰기 모드 점수
  audio_score INT DEFAULT 0, -- 청취 모드 점수
  correct_count INT DEFAULT 0,
  wrong_count INT DEFAULT 0,
  last_studied_at DATETIME,
  next_review_at DATETIME, -- SRS 스케줄링
  review_interval_hours INT DEFAULT 1, -- 복습 간격
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
  FOREIGN KEY (character_id) REFERENCES kana_characters(id) ON DELETE CASCADE,
  UNIQUE KEY unique_user_character (user_id, character_id),
  INDEX idx_user_next_review (user_id, next_review_at),
  INDEX idx_mastery (user_id, mastery_level)
);

-- 히라가나/가타카나 학습 세션
CREATE TABLE kana_sessions (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL,
  session_type ENUM('recognition', 'writing', 'audio', 'mixed') NOT NULL,
  kana_type ENUM('hiragana', 'katakana', 'both') NOT NULL,
  difficulty ENUM('basic', 'advanced', 'mixed') NOT NULL,
  total_questions INT NOT NULL,
  correct_answers INT NOT NULL,
  score DECIMAL(5,2), -- 백분율 점수
  duration_seconds INT,
  started_at DATETIME NOT NULL,
  completed_at DATETIME,
  session_data JSON, -- 상세 문제/답안 데이터

  FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE,
  INDEX idx_user_session (user_id, started_at),
  INDEX idx_session_type (session_type)
);

-- 히라가나/가타카나 학습 설정
CREATE TABLE kana_user_settings (
  id INT PRIMARY KEY AUTO_INCREMENT,
  user_id INT NOT NULL UNIQUE,
  preferred_mode ENUM('recognition', 'writing', 'audio', 'mixed') DEFAULT 'recognition',
  daily_goal INT DEFAULT 20, -- 하루 목표 문자 수
  auto_advance BOOLEAN DEFAULT TRUE, -- 자동 레벨업
  show_stroke_order BOOLEAN DEFAULT TRUE,
  audio_enabled BOOLEAN DEFAULT TRUE,
  review_notification BOOLEAN DEFAULT TRUE,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

  FOREIGN KEY (user_id) REFERENCES user(id) ON DELETE CASCADE
);
```

### 4. 프론트엔드 컴포넌트 구조

```
src/components/kana/
├── common/
│   ├── KanaCard.jsx          // 개별 문자 카드 컴포넌트
│   ├── KanaGrid.jsx          // 50음도 그리드 레이아웃
│   ├── KanaProgress.jsx      // 진도 표시 바
│   └── KanaSettings.jsx      // 학습 설정 모달
├── quiz/
│   ├── KanaQuiz.jsx          // 기본 퀴즈 컴포넌트
│   ├── RecognitionQuiz.jsx   // 인식 모드 퀴즈
│   ├── WritingQuiz.jsx       // 쓰기 모드 퀴즈
│   ├── AudioQuiz.jsx         // 청취 모드 퀴즈
│   └── MixedQuiz.jsx         // 혼합 모드 퀴즈
├── practice/
│   ├── KanaWriting.jsx       // Canvas 기반 쓰기 연습
│   ├── StrokeOrder.jsx       // 획순 가이드
│   └── KanaPractice.jsx      // 연습 모드 메인
├── stats/
│   ├── KanaStats.jsx         // 학습 통계 대시보드
│   ├── ProgressChart.jsx     // 진도 차트
│   └── WeakPoints.jsx        // 약점 분석
└── navigation/
    ├── KanaNavigation.jsx    // 네비게이션 메뉴
    └── LevelSelector.jsx     // 레벨/난이도 선택

src/pages/kana/
├── KanaHome.jsx              // 히라가나/가타카나 홈페이지
├── KanaPractice.jsx          // 연습 모드 페이지
├── KanaTest.jsx              // 테스트 모드 페이지
├── KanaStats.jsx             // 학습 통계 페이지
└── KanaSettings.jsx          // 설정 페이지
```

### 5. 학습 진행 시스템

#### 레벨 시스템
1. **기초 (Basic)**
   - 히라가나 기본 50음: あいうえお かきくけこ...
   - 가타카나 기본 50음: アイウエオ カキクケコ...

2. **중급 (Intermediate)**
   - 탁음: がざだば... ガザダバ...
   - 반탁음: ぱぴぷぺぽ パピプペポ

3. **고급 (Advanced)**
   - 요음: きゃきゅきょ キャキュキョ...
   - 촉음: っ ッ
   - 장음: ー

4. **마스터 (Master)**
   - 혼합 문제 (히라가나+가타카나)
   - 실제 단어 맥락에서 학습
   - 빠른 인식 훈련

#### SRS 통합 방식
- **기존 SRS 카드 시스템 활용**
- **kana_progress 테이블로 진도 관리**
- **틀린 문자는 짧은 간격으로 복습**
- **마스터한 문자는 긴 간격으로 유지 복습**

#### 성취 시스템
- **일일 목표**: 설정한 문자 수만큼 학습
- **연속 학습**: 스트릭 시스템
- **배지 시스템**:
  - 히라가나 마스터
  - 가타카나 마스터
  - 완벽주의자 (100% 정확도)
  - 속도왕 (빠른 응답시간)

### 6. API 엔드포인트 설계

```javascript
// 문자 데이터 관련
GET    /api/kana/characters              // 모든 히라가나/가타카나 목록
GET    /api/kana/characters/:type        // 타입별 문자 (hiragana/katakana)
GET    /api/kana/characters/:id          // 특정 문자 상세정보

// 사용자 진도 관리
GET    /api/kana/progress/:userId        // 사용자 전체 진도
GET    /api/kana/progress/:userId/:type  // 타입별 진도
PUT    /api/kana/progress               // 진도 업데이트
POST   /api/kana/progress/batch         // 여러 문자 진도 일괄 업데이트

// 퀴즈 및 학습
POST   /api/kana/quiz/generate          // 퀴즈 문제 생성
POST   /api/kana/quiz/submit            // 퀴즈 답안 제출
GET    /api/kana/review/:userId         // 복습할 문자 목록

// 학습 세션
POST   /api/kana/session/start          // 학습 세션 시작
PUT    /api/kana/session/:id            // 세션 진행상황 업데이트
POST   /api/kana/session/:id/complete   // 세션 완료

// 통계 및 분석
GET    /api/kana/stats/:userId          // 사용자 학습 통계
GET    /api/kana/stats/:userId/weak     // 약점 문자 분석
GET    /api/kana/stats/:userId/streak   // 학습 스트릭 정보

// 설정 관리
GET    /api/kana/settings/:userId       // 사용자 설정
PUT    /api/kana/settings/:userId       // 설정 업데이트
```

### 7. 특별 기능 및 개선사항

#### 게임화 요소
- **포인트 시스템**: 정답당 포인트 획득
- **레벨업**: 누적 포인트로 사용자 레벨 상승
- **도전과제**:
  - "완벽한 하루" (하루 종일 100% 정확도)
  - "스피드 러너" (평균 응답시간 1초 이하)
  - "꾸준한 학습자" (7일 연속 학습)

#### 개인화 학습
- **AI 기반 약점 분석**: 자주 틀리는 문자 패턴 분석
- **맞춤형 복습**: 개인별 망각곡선 적용
- **학습 스타일 분석**: 선호하는 학습 모드 파악
- **적응형 난이도**: 실력에 따른 자동 난이도 조절

#### 모바일 최적화
- **터치 최적화**: 스마트폰에서 쓰기 연습
- **오프라인 모드**: 기본 문자 데이터 캐싱
- **알림 시스템**: 복습 시간 알림
- **위젯 지원**: 홈화면에서 빠른 학습

#### 사회적 기능
- **리더보드**: 친구들과 진도 비교
- **스터디 그룹**: 같이 학습하는 그룹 생성
- **진도 공유**: SNS에 성취 공유

### 8. 구현 우선순위

#### Phase 1: 기본 구조 (2-3주)
1. 데이터베이스 테이블 생성 및 기본 데이터 입력
2. 기본 UI 컴포넌트 개발 (KanaCard, KanaGrid)
3. 인식 모드 퀴즈 기본 기능
4. 사용자 진도 관리 시스템

#### Phase 2: 핵심 기능 (3-4주)
1. 쓰기 모드 (Canvas 기반)
2. 청취 모드 (TTS 연동)
3. SRS 시스템 통합
4. 기본 통계 대시보드

#### Phase 3: 고급 기능 (2-3주)
1. 혼합 모드 및 고급 문자
2. 게임화 요소 (포인트, 배지)
3. 개인화 알고리즘
4. 모바일 최적화

#### Phase 4: 완성 및 최적화 (1-2주)
1. 성능 최적화
2. 사용자 테스트 및 피드백 반영
3. 버그 수정 및 안정화
4. 문서화 및 배포

### 9. 기술적 고려사항

#### 성능 최적화
- **lazy loading**: 문자 이미지 및 오디오 파일
- **메모리 관리**: Canvas 리소스 정리
- **캐싱 전략**: 자주 사용하는 데이터 캐싱

#### 접근성
- **키보드 네비게이션**: 마우스 없이도 사용 가능
- **고대비 모드**: 시각 장애인을 위한 고대비 테마
- **폰트 크기 조절**: 사용자 설정에 따른 크기 변경

#### 보안
- **입력 검증**: 사용자 입력 데이터 검증
- **rate limiting**: API 남용 방지
- **데이터 암호화**: 민감한 사용자 데이터 보호

이 계획을 단계별로 구현하면 기존 Language Learner 프로젝트에 효과적인 히라가나/가타카나 학습 기능을 추가할 수 있습니다.